org: ecvphdevs002
service: python-serverless-johnbons

provider:
  tracing:
    apiGateway: true
    lambda: true
  iamRoleStatements:
    - Effect: "Allow" # xray permissions (required)
      Action:
        - "xray:PutTraceSegments"
        - "xray:PutTelemetryRecords"
      Resource:
        - "*"
    - Effect: "Allow"
      Action:
        - "events:PutEvents"
      Resource:
        - "arn:aws:events:us-east-2:272898481162:event-bus/custom-johnbons-event-bus-2"
  name: aws
  runtime: python3.12
  role: arn:aws:iam::272898481162:role/serverless-app-role
  region: us-east-2
  environment:
    DYNAMODB_TABLE: products-johnbons2

plugins:
  - serverless-offline
  - serverless-prune-plugin
  - serverless-python-requirements
custom:
  prune:
    automatic: true
    number: 3 

functions:
  hello:
    handler: handlers.general_handler.hello
    events:
      - httpApi:
          path: /
          method: get

  getAllProducts:
    handler: handlers.product_handler.get_all_products
    events:
      - httpApi:
          path: /products
          method: get

  createOneProduct:
    handler: handlers.product_handler.create_one_product
    events:
      - httpApi:
          path: /products
          method: post
      - eventBridge:
          eventBus: arn:aws:events:us-east-2:272898481162:event-bus/custom-johnbons-event-bus-2
          pattern:
            source:
              - "product.service"
            detail-type:
              - "product_created"

  addStocksToProduct:
    handler: handlers.product_handler.add_stocks_to_product
    events:
      - http:
          path: products/{productId}/inventory
          method: post
          cors: true
          
  getOneProduct:
    handler: handlers.product_handler.get_one_product
    events:
      - httpApi:
          path: /products/{productId}
          method: get

  deleteOneProduct:
    handler: handlers.product_handler.delete_one_product
    events:
      - httpApi:
          path: /products/{productId}
          method: delete

  updateOneProduct:
    handler: handlers.product_handler.update_one_product
    events:
      - httpApi:
          path: /products/{productId}
          method: put

  batchCreateProducts:
    handler: handlers.product_handler.batch_create_products
    events:
      - s3:
          bucket: products-s3-johnbons4
          event: s3:ObjectCreated:*
          existing: true
          rules:
            - prefix: for_create/

  batchDeleteProducts:
    handler: handlers.product_handler.batch_delete_products
    events:
      - s3:
          bucket: products-s3-johnbons4
          event: s3:ObjectCreated:*
          existing: true
          rules:
            - prefix: for_delete/

resources:
  Resources:
    ProductsDynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: products-johnbons2
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: productId
            AttributeType: S
        KeySchema:
          - AttributeName: productId
            KeyType: HASH
        Tags:
          - Key: Environment
            Value: Production
            
    ProductsFetchedRule:
      Type: AWS::Events::Rule
      Properties:
        EventBusName: custom-johnbons-event-bus-2  # Using the existing event bus
        EventPattern:
          source:
            - "com.johnbons.products"
          detail-type:
            - "products_fetched"
        State: ENABLED
        Targets:
          - Arn: !GetAtt LogProductsEventsFunction.Arn
            Id: LogProductsEventsFunction
            
    LogProductsEventsFunction:
      Type: AWS::Lambda::Function
      Properties:
        FunctionName: log-products-events-johnbons
        Handler: index.log_products_events  # Change to this
        Runtime: python3.12
        Role: arn:aws:iam::272898481162:role/serverless-app-role
        Code:
          ZipFile: |
            import json
            import logging
            def log_products_events(event, context):
                print(f"Products Event Received: {json.dumps(event)}")
                return {"statusCode": 200}
                
    EventBridgeToLambdaPermission:
      Type: AWS::Lambda::Permission
      Properties:
        Action: lambda:InvokeFunction
        FunctionName: !Ref LogProductsEventsFunction
        Principal: events.amazonaws.com
        SourceArn: !GetAtt ProductsFetchedRule.Arn
    
    # Add this new ProductInventory table
    ProductInventoryTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ProductInventory-chall-johnbons2
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: productId
            AttributeType: S
          - AttributeName: datetime
            AttributeType: S
        KeySchema:
          - AttributeName: productId
            KeyType: HASH
          - AttributeName: datetime
            KeyType: RANGE

package:
  include:
    - handlers/**
    - services/**
    - utils/**
  exclude:
    - node_modules/**
    - tests/**
    - docs/**
    - .git/**
    - README.md
